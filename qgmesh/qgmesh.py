# -*- coding: utf-8 -*-
"""
/***************************************************************************
 qgmesh
                                 A QGIS plugin
 This plugin create 2D regular/irregular grid mesh 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-05-23
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Remy Zyngfogel
        email                : r.zyngfogel@metocean.co.nz
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction,QFileDialog

from qgis.core import QgsProject,QgsLayerTreeGroup,Qgis,QgsCoordinateTransform

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
import os.path

from .exportGeometry import GeoFile

class qgmesh:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'qgmesh_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&qgmesh')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('qgmesh', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/qgmesh/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Initialize folders...'),
            callback=self.initialize_folders,
            parent=self.iface.mainWindow(),
            add_to_toolbar=False,
            status_tip="Generate each folder needed by QGmsh.",
            whats_this="Generate folders: \n Boundaries, Channel. Islands  \n which are needed to run QGmsh.")

        self.add_action(
            icon_path,
            text=self.tr(u'Update geometry...'),
            callback=self.update_geofile,
            parent=self.iface.mainWindow(),
            add_to_toolbar=True,
            status_tip="Update the Geometry",
            whats_this="This will update th geometry needed by gmsh.")

        self.add_action(
            icon_path,
            text=self.tr(u'Export geometry...'),
            callback=self.export_geofile,
            parent=self.iface.mainWindow(),
            add_to_toolbar=False,
            status_tip="Export the Geometry",
            whats_this="This will export the geometry file for manual editing.")

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&qgmesh'),
                action)
            self.iface.removeToolBarIcon(action)


    def initialize_folders(self):
        """Run method that performs all the real work"""
        # See if OK was pressed
        groups=['Boundaries','Channels','Islands','Sizing']
        proj = QgsProject.instance()




        childs=[]
        for child in proj.layerTreeRoot().children():
            if isinstance(child, QgsLayerTreeGroup):
                childs.append(child.name())

        exists_already=[]
        for group in groups:
            if group not in childs:
                proj.layerTreeRoot().addGroup(group)
            else:
                exists_already.append(group)

        if len(exists_already)>1:
            self.iface.messageBar().pushMessage("Error", "layer(s): %s already exists" % ','.join(exists_already), level=Qgis.Warning)


    def update_geofile(self):
        proj = QgsProject.instance()
        crs=proj.crs()
        self.geo=GeoFile()
        added=[]
        for child in proj.layerTreeRoot().findGroups():        
            if child.name() in ['Boundaries','Islands','Channels']:
                for sub_subChild in child.children():
                    layer = proj.mapLayer(sub_subChild.layerId())
                    xform = QgsCoordinateTransform(layer.crs(), crs,proj)
                    self.geo.add_layer(layer,xform,child.name())
                    added.append(child.name())
        
        if len(added)>0:
            self.iface.messageBar().pushMessage("Info", "layer(s): %s added to Geometry" % ','.join(added), level=Qgis.Info)

        self.geo.writeSurface()

        


    def export_geofile(self):
        self.update_geofile()
        qfd = QFileDialog()
        path = ""
        fil = "geo(*.geo)"
        fname = QFileDialog.getSaveFileName(qfd, 'exprt Geo file', path, fil)
        fname=fname[0]
        if fname=='':
            return

        if not fname.endswith('.geo'):
            fname=fname+'.geo'

        with open(fname, 'w') as f:
            f.write(self.geo.geo.get_code() + '\n')

        f.close()
        self.iface.messageBar().pushMessage("Info", "%s exported " % fname, level=Qgis.Info)

    # def initialize_folders(self):
    #     """Run method that performs all the real work"""

    #     # Create the dialog with elements (after translation) and keep reference
    #     # Only create GUI ONCE in callback, so that it will only load when the plugin is started
    #     if self.first_start == True:
    #         self.first_start = False
    #         self.dlg = ExportGeoDialog()

    #     # show the dialog
    #     self.dlg.show()
    #     # Run the dialog event loop
    #     result = self.dlg.exec_()
    #     # See if OK was pressed
    #     if result:
    #         # Do something useful here - delete the line containing pass and
    #         # substitute with your code.
    #         pass
